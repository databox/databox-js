// tslint:disable
/**
 * Static OpenAPI document of Push API resource
 * Push API resources Open API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    PushData,
} from '../models';

export interface DataMetricKeyDeleteRequest {
    metricKey: string;
}

export interface DataPostRequest {
    pushData?: Array<PushData>;
}

export interface MetrickeysPostRequest {
    body?: object;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     */
    dataDelete(): Observable<void>
    dataDelete(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dataDelete(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/data',
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    dataMetricKeyDelete({ metricKey }: DataMetricKeyDeleteRequest): Observable<void>
    dataMetricKeyDelete({ metricKey }: DataMetricKeyDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dataMetricKeyDelete({ metricKey }: DataMetricKeyDeleteRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(metricKey, 'metricKey', 'dataMetricKeyDelete');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/data/{metricKey}'.replace('{metricKey}', encodeURI(metricKey)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    dataPost({ pushData }: DataPostRequest): Observable<void>
    dataPost({ pushData }: DataPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    dataPost({ pushData }: DataPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/data',
            method: 'POST',
            headers,
            body: pushData,
        }, opts?.responseOpts);
    };

    /**
     */
    metrickeysGet(): Observable<void>
    metrickeysGet(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metrickeysGet(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/metrickeys',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     */
    metrickeysPost({ body }: MetrickeysPostRequest): Observable<void>
    metrickeysPost({ body }: MetrickeysPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    metrickeysPost({ body }: MetrickeysPostRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/metrickeys',
            method: 'POST',
            headers,
            body: body as any,
        }, opts?.responseOpts);
    };

    /**
     */
    pingGet(): Observable<void>
    pingGet(opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    pingGet(opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/ping',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}
